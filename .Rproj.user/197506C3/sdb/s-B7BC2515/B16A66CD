{
    "contents" : "\\name{rkafka.startConsumer}\n\\alias{rkafka.startConsumer}\n\\alias{zookeeperConnect}\n\\alias{groupId}\n\\alias{zookeeperConnectionTimeoutMs}\n\\alias{consumerTimeoutMs}\n\\alias{autoCommitEnable}\n\\alias{autoCommitInterval}\n\\alias{autoOffsetReset}\n%- Also NEED an '\\alias' for EACH other topic documented here.\n\\title{\nCreating high level KAFKA consumer\n}\n\\description{\nThis function creates a high level KAFKA consumer\n}\n\\usage{\nrkafka.startConsumer(zookeeperConnect,groupId=\"test-consumer-group\",zookeeperConnectionTimeoutMs=\"100000\",consumerTimeoutMs=\"5000\",autoCommitEnable=\"true\",autoCommitInterval=\"1000\",autoOffsetReset=\"largest\")\n}\n%- maybe also 'usage' for other objects documented here.\n\\arguments{\n  \\item{zookeeperConnect}{\n#@param zookeeperConnect\n#*            !!Mandatory:Zookeeper connection string comma separated\n#*            host:port pairs, each corresponding to a zk server. e.g.\n#*            \"127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\"\n#*  \t\t  default:\"127.0.0.1:2181\"\n}\n  \\item{groupId}{\n#* @param groupId\n#*            !!Mandatory:consumer group id default:test-consumer-group\n}\n  \\item{zookeeperConnectionTimeoutMs}{\n#* @param zookeeperConnectionTimeoutMs\n#*            !!Mandatory:timeout in ms for connecting to zookeeper\n#*            default:100000\n}\n \\item{consumerTimeoutMs}{\n#* @param consumerTimeoutMs\n#*            !!Mandatory:Throw a timeout exception to the consumer if no\n#*            message is available for consumption after the specified\n#*            interval default:1000\n}\n  \\item{autoCommitEnable}{\n#*            --Optional:default:true If true, periodically commit to\n#*            ZooKeeper the offset of messages already fetched by the\n#*            consumer. This committed offset will be used when the process\n#*            fails as the position from which the new consumer will begin.\n}\n  \\item{autoCommitInterval}{\n#* @param autoCommitIntervalMs\n#*            --Optional:default:60*1000 The frequency in ms that the\n#*            consumer offsets are committed to zookeeper.\n}\n  \\item{autoOffsetReset}{\n#*            --Optional:default:largest * smallest : automatically reset\n#*            the offset to the smallest offset largest : automatically\n#*            reset the offset to the largest offset anything else: throw\n#*            exception to the consumer\n}\n \n}\n\\details{\n%%  ~~ If necessary, more details than the description above ~~\n}\n\\value{\nReturns a consumer\n}\n\\references{\n%% ~put references to the literature/web site here ~\n}\n\\author{\nShruti Gupta\n}\n\\note{\n%%  ~~further notes~~\n}\n\n%% ~Make other sections like Warning with \\section{Warning }{....} ~\n\n\\seealso{\n%% ~~objects to See Also as \\code{\\link{help}}, ~~~\n}\n\\examples{\nconsumer1=rkafka.startConsumer(\"127.0.0.1:2181\")\nconsumer2=rkafka.startConsumer(\"127.0.0.1:2181\",\"test-consumer-group\",\"50000\",\"1000\")\n\n}\n% Add one or more standard keywords, see file 'KEYWORDS' in the\n% R documentation directory.\n\\keyword{ ~kafka }\n\\keyword{ ~consumer }\n\\keyword{ ~create}% __ONLY ONE__ keyword per line\n",
    "created" : 1424098965802.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3086831397",
    "id" : "B16A66CD",
    "lastKnownWriteTime" : 1424101475,
    "path" : "/home/shrutigupta34/rkafkafinal/rkafka1.0/src/man/rkafka.startConsumer.Rd",
    "project_path" : "src/man/rkafka.startConsumer.Rd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_doc"
}